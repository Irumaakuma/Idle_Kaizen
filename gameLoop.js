// ‚úÖ gameLoop.js complet et √† jour

function checkJobEvolution() {
    const currentId = player.currentJobId;
    const job = jobs.find(j => j.id === currentId);
    if (!job || !job.upgradesTo) return;
  
    const nextJob = jobs.find(j => j.id === job.upgradesTo);
    const skillLevel = player.skills[job.requiredSkill]?.level || 0;
    const jobLevel = player.jobs[job.id]?.level || 0;
  
    if (skillLevel >= nextJob.skillRequired && jobLevel >= nextJob.requiredLevel) {
      trackJobHeritage(job.id); // üß¨ H√©ritage enregistr√©
      player.currentJobId = nextJob.id;
      showToast(`‚¨ÜÔ∏è Ton m√©tier √©volue en : ${nextJob.name} !`);
    }
  }
  
  function updateMaxAge() {
    const fondamentales = Object.values(player.skills).filter(s => s.group === "fondamentale");
    const totalLevels = fondamentales.reduce((sum, s) => sum + s.level, 0);
    const bonusParNiveau = Math.floor(totalLevels / 100) * 0.1;
  
    const bonheur = parseFloat(player.happiness || 1);
    const bonusBonheur = bonheur * 0.2;
  
    const enduranceBonus = player.skills.endurance?.getEffect() || 0;
    player.maxAge = 30 + bonusParNiveau + bonusBonheur + enduranceBonus;

  }
  
  function updateGameLoop() {
    if (player.dead) return;
  
    const jobActif = !!player.currentJobId;
    const skillActif = !!player.currentSkillId && player.skills[player.currentSkillId]?.unlocked;
  
    // ‚úÖ Avancer le temps SEULEMENT si job ou comp√©tence active
    if (jobActif || skillActif) {
      player.day += applySpeed(1);
    }
  
    // üîÅ Ex√©cution du job
    if (jobActif) {
      const job = jobs.find(j => j.id === player.currentJobId);
      if (job) {
        job.run();
        checkJobEvolution();
      }
    }
  
    // ‚ú® XP comp√©tence (patch fluide)
    if (skillActif) {
      const skill = player.skills[player.currentSkillId];
      const SKILL_XP_MULTIPLIER = 5;
      const gain = applySpeed(skill.getXpGain?.() || 0) * SKILL_XP_MULTIPLIER;
  
      player.queuedSkillXp = (player.queuedSkillXp || 0) + gain;
      skill.xp += player.queuedSkillXp;
      player.queuedSkillXp = 0;
  
      while (skill.xp >= skill.getMaxXp()) {
        skill.xp -= skill.getMaxXp();
        skill.level++;
      }
  
      // üéØ Mettre √† jour l‚Äôinterface comp√©tence
      const bar = document.getElementById("current-skill-bar");
      if (bar) {
        bar.style.width = `${skill.getProgress()}%`;
      }
  
      const skillDisplay = document.getElementById("current-skill-display");
      if (skillDisplay) {
        skillDisplay.textContent = `${skill.name} (Nv. ${skill.level})`;
      }
    }
  
    // üõí V√©rification automatique des items shop
    manageShopItems();
  
    // üìÜ Mise √† jour des √©v√©nements quotidiens
    if (player.dailyBonus?.duration > 0) {
      player.dailyBonus.duration--;
      if (player.dailyBonus.duration <= 0) {
        showToast("‚è≥ L'effet de l'√©v√©nement du jour s'est dissip√©.");
        player.dailyBonus = null;
      }
    }
  
    // üìà Mise √† jour de l‚Äô√¢ge + mort
    if (jobActif || skillActif) {
      const totalDays = Math.floor(player.day);
      player.age = 14 + Math.floor(totalDays / 365);
  
      updateMaxAge();
      manageShopItems(); // (s√©curit√© double si jamais appel√© ailleurs)
  
      if (player.age >= player.maxAge && !player.dead) {
        player.dead = true;
  
        let bonusHTML = "<ul style='margin-left: 10px;'>";
        for (let id in player.skills) {
          const skill = player.skills[id];
          if (skill.group === "fondamentale") {
            const bonus = Math.floor(skill.level / 10) * 0.1;
            if (bonus > 0) {
              player.rebirthBonuses[id] = (player.rebirthBonuses[id] || 0) + bonus;
              bonusHTML += `<li><strong>${skill.name}</strong> : +${bonus.toFixed(1)} bonus Rebirth</li>`;
            }
          }
        }
        bonusHTML += "</ul>";
  
        document.getElementById("rebirth-bonuses-list").innerHTML = bonusHTML;
        showToast("‚ò†Ô∏è Tu es mort de vieillesse √† " + Math.floor(player.age) + " ans...");
      }
    }
  
    updateUI();
  }
  
  
  
  
  
  function triggerRebirth() {
    player.rebirth = (player.rebirth || 0) + 1;
  
    // ‚úÖ Appliquer les bonus m√™me sans mort de vieillesse
    if (!player.rebirthBonuses) player.rebirthBonuses = {};
    let bonusHTML = "<ul style='margin-left: 10px;'>";
    for (let id in player.skills) {
      const skill = player.skills[id];
      if (skill.group === "fondamentale") {
        const bonus = Math.floor(skill.level / 10) * 0.1;
        if (bonus > 0) {
          player.rebirthBonuses[id] = (player.rebirthBonuses[id] || 0) + bonus;
          bonusHTML += `<li><strong>${skill.name}</strong> : +${bonus.toFixed(1)} bonus Rebirth</li>`;
        }
      }
    }
    bonusHTML += "</ul>";
    document.getElementById("rebirth-bonuses-list").innerHTML = bonusHTML;
  
    // üîÅ R√©initialisation du joueur
    const savedBonuses = { ...player.rebirthBonuses };
  
    Object.assign(player, {
      berries: 0,
      xp: 0,
      level: 1,
      job: "Civil",
      currentJobId: null,
      currentSkillId: null,
      day: 1,
      age: 0,
      dead: false,
      maxAge: 30,
      rebirthBonuses: savedBonuses,
      questsCompleted: [],
      hasLogPose: false,
      queuedIncome: 0,
      queuedSkillXp: 0
    });
  
    // üîÑ R√©initialiser les jobs
    player.jobs = {};
    jobs.forEach(j => {
      j.level = 1;
      j.xp = 0;
    });
  
    // üîÑ R√©initialiser les skills
    player.skills = {};
    for (let id in window.defaultSkills) {
      const base = window.defaultSkills[id];
      player.skills[id] = new Skill({
        id: base.id,
        name: base.name,
        baseXpGain: base.baseXpGain,
        baseEffect: base.baseEffect,
        group: base.group,
        unlocked: true,
        getBonusDamage: base.getBonusDamage,
        getBonusDodge: base.getBonusDodge,
        getTripleHitChance: base.getTripleHitChance,
        getIgnoreDefense: base.getIgnoreDefense,
        getEventChanceBoost: base.getEventChanceBoost,
        getEventDurationBoost: base.getEventDurationBoost,
        getFactionRevenueBonus: base.getFactionRevenueBonus,
        getFactionSpeedBonus: base.getFactionSpeedBonus,
        maxLevel: base.maxLevel
      });
    }
  
    // ‚úÖ R√©activer l‚ÄôUI
    document.querySelectorAll("#tabs button").forEach(btn => {
      btn.disabled = false;
      btn.style.opacity = 1;
      btn.style.pointerEvents = "auto";
    });
  
    // ‚úÖ Masquer la section Rebirth
    document.getElementById("rebirth-section").style.display = "none";
  
    // ‚úÖ Restaurer la navigation normale
    if (typeof originalSwitchTab === "function") {
      window.switchTab = originalSwitchTab;
    }
  
    showToast("üîÅ Nouvelle vie lanc√©e ! Tes bonus sont actifs.");
    updateUI();
  }
  
  
  

  // üé≤ Syst√®me complet d‚Äô√©v√©nements al√©atoires
const dailyEvents = {
  positive: [
    { message: "üì¶ Un coffre de ravitaillement t‚Äôapporte +500 berries", effect: () => player.berries += 500 },
    { message: "‚öôÔ∏è Tes outils sont aff√ªt√©s : jobs -20% dur√©e", effect: () => player.dailyModifiers.interval *= 0.8 },
    { message: "üìö Tu d√©couvres une technique : +1 niveau al√©atoire", effect: () => {
      const skills = Object.values(player.skills).filter(s => s.unlocked);
      if (skills.length) skills[Math.floor(Math.random() * skills.length)].level++;
    }},
    { message: "üß≠ Navigation id√©ale : +15% revenus", effect: () => player.dailyModifiers.income *= 1.15 },
    { message: "‚öíÔ∏è Entra√Ænement optimis√© : +10% XP passive", effect: () => player.dailyModifiers.xp *= 1.1 },
    { message: "üèóÔ∏è Jobs en cha√Æne boost√©s", effect: () => player.dailyModifiers.interval *= 0.85 },
    { message: "üõ≥Ô∏è Navigation rapide : vitesse +15%", effect: () => player.dailyModifiers.interval *= 0.85 },
    { message: "üß∞ Artisanat efficace : -20% prix boutique", effect: () => player.dailyModifiers.price *= 0.8 },
    { message: "üìñ Savoir tactique : +5 intelligence", effect: () => player.skills.intelligence.level += 5 },
    { message: "üí™ Tu es en forme : +5 force", effect: () => player.skills.force.level += 5 },
    { message: "üõ°Ô∏è Tu ressens une aura de protection...", effect: () => player._haki_armement_trigger = true },
    { message: "üëÅÔ∏è Tu entends des voix invisibles...", effect: () => player._haki_observation_trigger = true },
    { message: "üëë Un √©clair traverse ton esprit...", effect: () => player._haki_roi_trigger = true },

  ],
  negative: [
    { message: "üåÄ Temp√™te : +20% dur√©e jobs", effect: () => player.dailyModifiers.interval *= 1.2 },
    { message: "üí∞ Corruption : -25% revenus", effect: () => player.dailyModifiers.income *= 0.75 },
    { message: "üß± Chute : +15% intervalle jobs", effect: () => player.dailyModifiers.interval *= 1.15 },
    { message: "üöß Barrage administratif : jobs +20% dur√©e", effect: () => player.dailyModifiers.interval *= 1.2 },
    { message: "üìâ Perte de m√©moire : -1 niveau random", effect: () => {
      const skills = Object.values(player.skills).filter(s => s.level > 1);
      if (skills.length) skills[Math.floor(Math.random() * skills.length)].level--;
    }},
    { message: "üî© Panne technique : -15% revenus", effect: () => player.dailyModifiers.income *= 0.85 },
    { message: "üòµ Fatigue mentale : XP -10%", effect: () => player.dailyModifiers.xp *= 0.9 },
    { message: "üì¶ Stock ab√Æm√© : +50% prix boutique", effect: () => player.dailyModifiers.price *= 1.5 },
    { message: "üí• Retard g√©n√©ral : +30% qu√™tes", effect: () => player.dailyModifiers.interval *= 1.3 },
    { message: "‚öíÔ∏è Fatigue extr√™me : vitesse -15%", effect: () => player.dailyModifiers.interval *= 1.15 }
  ]
};

function triggerDailyEvent() {
  player.dailyModifiers = { income: 1, interval: 1, price: 1, xp: 1 };
  player.canUnlockHakiToday = false;

  const eventChanceBonus = player.skills.cartographie?.getEventChanceBoost?.(player.skills.cartographie.level || 0) || 0;
  const eventDurationBonus = player.skills.manoeuvre_navire?.getEventDurationBoost?.(player.skills.manoeuvre_navire.level || 0) || 0;
  const boostedChance = 0.15 + eventChanceBonus;

  const roll = Math.random();

  if (roll < boostedChance) {
    const event = dailyEvents.positive[Math.floor(Math.random() * dailyEvents.positive.length)];
    player.dailyBonus = { type: "positive", duration: 25 + eventDurationBonus };
    player.canUnlockHakiToday = true;
    showToast("üåü " + event.message);
    event.effect();
  } else if (roll > 0.85) {
    const event = dailyEvents.negative[Math.floor(Math.random() * dailyEvents.negative.length)];
    player.dailyBonus = { type: "negative", duration: 25 + eventDurationBonus };
    showToast("‚ö†Ô∏è " + event.message);
    event.effect();

    if (Math.random() < 0.001) {
      player.dead = true;
      showToast("‚ò†Ô∏è Tu as √©t√© victime d'un √©v√©nement fatal !");
    }
  } else {
    player.dailyBonus = null;
  }
}


// ‚è±Ô∏è √Ä appeler dans ta boucle journali√®re
if (typeof player.lastDayChecked === "undefined" || player.lastDayChecked !== Math.floor(player.day)) {
  player.lastDayChecked = Math.floor(player.day);
  triggerDailyEvent();
}
  
  
  window.updateMaxAge = updateMaxAge;
  window.updateGameLoop = updateGameLoop;
  window.triggerRebirth = triggerRebirth;
  window.checkJobEvolution = checkJobEvolution;